{"version":3,"sources":["services/contextLib.js","components/filter/elements/FilterDropdown.jsx","components/filter/FilterComponent.jsx","services/helper.js","components/table/elements/ProgressBar.jsx","components/table/elements/Initiative.jsx","components/table/elements/FixedVersionTitle.jsx","components/table/elements/FixedVersionCell.jsx","components/table/Table.jsx","App.js","index.js"],"names":["AppContext","createContext","useAppContext","useContext","FilterDropdown","arrayToFilter","setArrayToFilter","filter","useState","dropdownOpen","setDropdownOpen","ButtonDropdown","isOpen","toggle","prevState","className","DropdownToggle","caret","DropdownMenu","map","data","i","DropdownItem","FormGroup","check","Label","name","Input","type","defaultChecked","isSelected","onChange","e","target","checked","newArr","console","log","FilterComponent","fixedVersions","setFixedVersions","initiatives","setInitiatives","parseByIssueType","issuesData","issueTypeFilter","temp_array","issue","issueType","push","progressForEpics","epic","key","a","done","progress","backlog","epicInfo","j","statusType","fields","status","eProgress","length","Done","Progress","Backlog","paginationApiCalls","apiFunction","maxResults","size","startAt","tempIssues","invoke","Key","start","max","then","ProgressBar","number","multi","bar","color","value","Initiative","props","initiativesProgress","setInitiativeProgress","Col","xs","onClick","router","open","iKey","title","iProgress","dueDate","FixedVersionTitle","end","FixedVersionCell","epics","setEpics","epicsProgress","setEpicsProgress","fixVersions","eFV","p","id","parents","parent","h","initKey","class","ReactTableComponent","Row","fixVer","startDate","releaseDate","initiative","App","issues","setIssues","useEffect","view","getContext","context","extension","project","projectKey","getAllInfo","sort","b","Date","sortInitiatives","epicProgress","getProgressForEpics","init","amountOfEpics","childrens","epicKey","k","version","v","progressForInitiatives","getInitiativesProgress","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c077f74c.chunk.js","sourcesContent":["import { useContext, createContext } from \"react\";\r\n\r\nexport const AppContext = createContext(null);\r\n//create a global context for all pages\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    ButtonDropdown,\r\n    DropdownToggle,\r\n    Dropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormText,\r\n} from \"reactstrap\";\r\n\r\n\r\n\r\nexport default function FilterDropdown(arrayToFilter, setArrayToFilter, filter) {\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n    return (\r\n        <div>\r\n\r\n            <ButtonDropdown isOpen={dropdownOpen} toggle={toggle} className=\"buttonDrop\">\r\n                <DropdownToggle caret className=\"fgh\">\r\n                    Filter {filter}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {arrayToFilter.map((data, i) => (\r\n                        <DropdownItem toggle={false}><FormGroup check>\r\n                            <Label check>\r\n                                {arrayToFilter[i].name /**label names */}\r\n                                <Input type=\"checkbox\"\r\n                                    defaultChecked={data.isSelected /**checkbox is ticked value*/}\r\n                                    onChange={(e) => {\r\n                                        //store current data\r\n                                        //if an event update\r\n                                        if (e.target.checked == true) {\r\n                                            let newArr = [...arrayToFilter];\r\n                                            console.log(\"BOOLEAN set to: \" + e.target.checked);\r\n                                            //store updated value in temp array\r\n                                            newArr[i].isSelected = e.target.checked;\r\n                                            //update usestate\r\n                                            setArrayToFilter(newArr)\r\n                                            console.log(arrayToFilter[i].isSelected);\r\n                                        }\r\n                                        // check if box is not ticked\r\n                                        if (e.target.checked == false) {\r\n                                            let newArr = [...arrayToFilter];\r\n                                            console.log(\"BOOLEAN set to: \" + e.target.checked);\r\n                                            //store updated value in temp array\r\n                                            newArr[i].isSelected = e.target.checked;\r\n                                            //update usestate\r\n                                            setArrayToFilter(newArr)\r\n                                            console.log(arrayToFilter[i].isSelected);\r\n\r\n                                        }\r\n                                    }} />{\" \"}\r\n                            </Label>{\" \"}\r\n                        </FormGroup></DropdownItem>\r\n                    ))}\r\n                </DropdownMenu>\r\n            </ButtonDropdown>\r\n\r\n        </div>\r\n    )\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    ButtonDropdown,\r\n    DropdownToggle,\r\n    Dropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormText,\r\n} from \"reactstrap\";\r\n\r\nimport { useAppContext } from \"../../services/contextLib\";\r\nimport FilterDropdown from \"./elements/FilterDropdown\";\r\n\r\n\r\nexport default function FilterComponent() {\r\n\r\n    const { fixedVersions, setFixedVersions } = useAppContext();\r\n    const { initiatives, setInitiatives } = useAppContext();\r\n\r\n    return (\r\n        <div className=\"dropItem\">\r\n            {/* Call re-usable filters*/}\r\n            {FilterDropdown(fixedVersions, setFixedVersions, \"Releases\")}\r\n            {FilterDropdown(initiatives, setInitiatives, \"Initiative\")}\r\n        </div>\r\n    )\r\n}","import { view, invoke, router } from \"@forge/bridge\";\r\n\r\n/**\r\n *\r\n * @param {*} issuesData data to parse through\r\n * @param {*} issueTypeFilter issueType to return\r\n * @returns json array of issues filtered by issue type\r\n */\r\nexport function parseByIssueType(issuesData, issueTypeFilter) {\r\n  var temp_array = [];\r\n  issuesData.map((issue, i) => {\r\n    if (issue.issueType == issueTypeFilter) {\r\n      temp_array.push(issue);\r\n    }\r\n  });\r\n  return temp_array;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} initiatives initiatives json array\r\n * @param {*} epics epics json array\r\n * @param {*} fixedVersions fix versions json array\r\n * @returns json array of progress for initiatives\r\n */\r\nexport function progressForInitiatives(initiatives, epics, fixedVersions) {\r\n  //establish array ot return\r\n  var initiativesProgress = [];\r\n  //map thourhg all initiatives\r\n  initiatives.map((init, i) => {\r\n    //establish values to return\r\n    let amountOfEpics = 0;\r\n    let done = 0;\r\n    let progress = 0;\r\n    let backlog = 0;\r\n    //map through children of each initiative\r\n    init.childrens.map((epicKey, j) => {\r\n      //map through all the epics\r\n      epics.map((epic, k) => {\r\n        //if epics are chidlren of initiative\r\n        if (epicKey == epic.key) {\r\n          //map fixed versions\r\n          fixedVersions.map((version, v) => {\r\n            //if children exist within a fixed versions and the version is currently displayed\r\n            if (\r\n              epic.fixVersions[0] == version.id &&\r\n              version.isSelected == true\r\n            ) {\r\n              console.log(epic.fixVersions[0] + \"==\" + version.id);\r\n              console.log(version.isSelected);\r\n              //add value based on value progress\r\n              if (epic.status == \"Done\") {\r\n                done += 1;\r\n              } else if (\r\n                epic.status == \"Backlog\" ||\r\n                epic.status == \"Selected For Development\"\r\n              ) {\r\n                backlog += 1;\r\n              } else {\r\n                progress += 1;\r\n              }\r\n              //add to total amount of childrens\r\n              amountOfEpics += 1;\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n    //add values to json array\r\n    var iProgress = {\r\n      key: init.key,\r\n      length: amountOfEpics,\r\n      Done: done,\r\n      Progress: progress,\r\n      Backlog: backlog,\r\n    };\r\n    //push to array to return\r\n    initiativesProgress.push(iProgress);\r\n  });\r\n  console.log(initiativesProgress);\r\n  return initiativesProgress;\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} epic json array containing epics\r\n * @param {*} key epic key to check progress of\r\n * @returns \r\n */\r\nexport async function progressForEpics(epic, key) {\r\n  let done = 0;\r\n  let progress = 0;\r\n  let backlog = 0;\r\n  epic.map((epicInfo, j) => {\r\n    let statusType = epicInfo.fields.status.name;\r\n    if (statusType == \"Done\") {\r\n      done += 1;\r\n    } else if (\r\n      statusType == \"Backlog\" ||\r\n      statusType == \"Selected For Development\"\r\n    ) {\r\n      backlog += 1;\r\n    } else {\r\n      progress += 1;\r\n    }\r\n  });\r\n\r\n  var eProgress = {\r\n    key: key,\r\n    length: epic.length,\r\n    Done: done,\r\n    Progress: progress,\r\n    Backlog: backlog,\r\n  };\r\n  return eProgress;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} contextKey project context key\r\n * @param {*} apiCall1 fetch issues api call\r\n * @param {*} apiCall2 fetch children api call\r\n * @returns returns combined 2 api calls values into a single array of arrays\r\n */\r\nexport async function fetchAllIssueInfo(epicKeys, issues) {\r\n  for (let i = 0; i < issues.length; i++) {\r\n    if (issues[i][2] == \"Epic\") {\r\n      let issuesKeys = await apiCall2(issues[i][0]);\r\n      issues[i].push(issuesKeys);\r\n    }\r\n  }\r\n  return [issues];\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} key key given to api call\r\n * @param {*} apiFunction API function to be used in the function\r\n * @returns returns all issues from api function after applying pagination\r\n */\r\nexport async function paginationApiCalls(key, apiFunction) {\r\n  let maxResults = 100;\r\n  let size = 100;\r\n  let startAt = 0;\r\n  let tempIssues = [];\r\n  while (size >= maxResults || size > 0) {\r\n    await invoke(apiFunction, {\r\n      Key: key,\r\n      start: startAt,\r\n      max: maxResults,\r\n    }).then((data) => {\r\n      data.map((issue) => {\r\n        tempIssues.push(issue);\r\n      });\r\n      size = data.length;\r\n      console.log(size);\r\n      startAt += size;\r\n    });\r\n  }\r\n  return tempIssues;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nimport {\r\n    Col, Progress\r\n} from \"reactstrap\";\r\nimport { useAppContext } from \"../../../services/contextLib\";\r\n\r\n\r\n\r\n\r\n\r\nexport function ProgressBar(size, done, progress, backlog) {\r\n    //calculate how big progress bar need to be\r\n    let number = 100 / size;\r\n\r\n    //progress bar \r\n    return (\r\n        <div className=\"ProgBar\"><Progress multi>\r\n            <Progress bar className=\"progressGreen\" color=\"success\" value={done * number}> {done}</Progress>\r\n            <Progress bar className=\"progressBlue\"  value={progress * number}> {progress}</Progress>\r\n            <Progress bar className=\"progressGrey\" value={backlog * number}> {backlog}</Progress>\r\n        </Progress></div>\r\n\r\n    )\r\n}\r\n// (NOT IN USE ATM)\r\nexport function LoadingBar(){\r\n    return(\r\n        <div>\r\n            <Progress animated value=\"100\">Loading...</Progress>\r\n        </div>\r\n\r\n    )\r\n}\r\n// (NOT IN USE ATM)\r\nexport function EmptyBar(){\r\n    return(\r\n        <div className=\"ProgBar\">\r\n            <Progress bar className=\"progressGrey\" value=\"100\">No Epics exist</Progress>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useTable } from \"react-table\";\r\nimport {router} from \"@forge/bridge\"\r\nimport {\r\n    Col, Progress\r\n} from \"reactstrap\";\r\nimport { useAppContext } from \"../../../services/contextLib\";\r\nimport { ProgressBar, LoadingBar, EmptyBar } from \"./ProgressBar\";\r\n\r\n\r\nexport default function Initiative(props) {\r\n    const { initiativesProgress, setInitiativeProgress } = useAppContext();\r\n    return (\r\n        <Col xs=\"auto\">\r\n            <div className=\"initiativeBox\">\r\n\r\n                {/* Display initiative and allow it to open in new tab when clicked*/}\r\n                <div className=\"initiative\" onClick={(()=> router.open(`/browse/${props.iKey}`))}>\r\n                    <div className=\"iniTitle\">{props.title}</div>\r\n\r\n                    {/* Display progress bar for initiative*/}\r\n                    <div className=\"pbar\">\r\n                        {initiativesProgress.map((iProgress, i) => (\r\n                            <div>\r\n                                {(() => {\r\n                                    if (iProgress.key == props.iKey) {\r\n\r\n                                        {/* Display progress bar, if empty display gray box*/}\r\n                                        if (!iProgress.length == 0) {\r\n\r\n                                            return (\r\n                                                <div>\r\n                                                    <div className=\"initiativeBar\">{ProgressBar(iProgress.length, iProgress.Done, iProgress.Progress, iProgress.Backlog)}</div>\r\n                                                    <span className=\"storieGreen\"> Done</span>\r\n                                                    <span> / </span>\r\n                                                    <span className=\"storieblue\"> in Progress</span>\r\n                                                    <span> / </span>\r\n                                                    <span className=\"storieGrey\"> Backlog</span>\r\n                                                </div>\r\n\r\n                                            );\r\n\r\n                                        }else{\r\n                                            return(\r\n                                                <div>\r\n                                                    <div className=\"initiativeBar\">{EmptyBar()}</div>\r\n\r\n                                                </div>\r\n                                            )\r\n                                        };\r\n                                    }\r\n                                })()}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    {/* initiative due date and key*/}\r\n                    <div className=\"InititivetextCont\">\r\n                        <div className=\"initiativeDueDate\"><p className=\"initDueDate\">{props.dueDate}</p></div>\r\n                        <div className=\"initiativeKey\"><p className=\"initKey\">{props.iKey}</p></div>\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n        </Col>\r\n\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nimport {\r\n    Col\r\n} from \"reactstrap\";\r\n\r\n//Title for each fixed version\r\nexport default function FixedVersionTitle(props) {\r\n    return (\r\n        <Col xs=\"auto\">\r\n            <div className=\"fixSize\">\r\n                <p className=\"dateonfix\">\r\n                    {props.title} -- {props.start} -{\" \"}\r\n                    {props.end}\r\n                </p>\r\n            </div>\r\n\r\n        </Col>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useTable } from \"react-table\";\r\nimport {router} from \"@forge/bridge\"\r\nimport {\r\n    Col, Progress\r\n} from \"reactstrap\";\r\n\r\n// import components and elements\r\nimport {ProgressBar} from \"./ProgressBar\";\r\nimport { useAppContext } from \"../../../services/contextLib\";\r\n\r\n\r\n\r\n\r\nexport default function FixedVersionCell(props) {\r\n    const { epics, setEpics } = useAppContext();\r\n    const { epicsProgress, setEpicsProgress } = useAppContext();\r\n\r\n    return (<div className=\"fixedVersion\">\r\n        <p className=\"fadedTitleCell\">{props.title}</p>\r\n\r\n        {/* loop through epics*/}\r\n        {epics.map((epic, j) => (\r\n            <div>\r\n\r\n\r\n                {epic.fixVersions.map((eFV, p) => (\r\n                    //Make epic open in new tab\r\n                    <div onClick={(() => router.open(`/browse/${epic.key}`))}>\r\n                        {(() => {\r\n                            // Check if fixed version matches with epics fixed version\r\n                            if (eFV == props.id) {\r\n                                return (\r\n\r\n                                    <div>\r\n                                        {epic.parents.map((parent, h) => (\r\n                                            <div>\r\n                                                {(() => {\r\n                                                    if (parent == props.initKey) {\r\n                                                        return (\r\n\r\n                                                            // Display epic \r\n                                                            <div>\r\n                                                                <div className=\"epic\">\r\n\r\n                                                                    <div className=\"epicName\">\r\n                                                                        <p>\r\n                                                                            {epic.name}\r\n                                                                        </p>\r\n                                                                    </div>\r\n\r\n                                                                    {/* Check if progress bar for epic !empty else grey box */}\r\n                                                                    {(() => {\r\n                                                                    if(epicsProgress.length>0)\r\n                                                                    {\r\n                                                                    return(\r\n                                                                        //Progress bar\r\n                                                                    <div className=\"pbar\">\r\n\r\n                                                                        {epicsProgress.map((eProgress, i) => (\r\n                                                                            <div>\r\n                                                                                {(() => {\r\n                                                                                    if (eProgress.key == epic.key) {\r\n\r\n                                                                                        if (!eProgress.length == 0) {\r\n\r\n\r\n                                                                                            return (\r\n                                                                                                <div>\r\n                                                                                                    <p>Number of Stories : {eProgress.length}</p>\r\n                                                                                                    {ProgressBar(eProgress.length, eProgress.Done, eProgress.Progress, eProgress.Backlog)}\r\n                                                                                                    <span className=\"storieGreen\"> Done</span>\r\n                                                                                                    <span> / </span>\r\n                                                                                                    <span className=\"storieblue\"> in Progress</span>\r\n                                                                                                    <span> / </span>\r\n                                                                                                    <span className=\"storieGrey\"> Backlog</span>\r\n\r\n                                                                                                </div>\r\n\r\n                                                                                            );\r\n\r\n                                                                                        } else {\r\n                                                                                            return (\r\n                                                                                                <div><p>Number of stories : {eProgress.length}</p></div>\r\n                                                                                            )\r\n                                                                                        };\r\n                                                                                    }\r\n                                                                                })()}\r\n                                                                            </div>\r\n                                                                        ))}\r\n                                                                    \r\n                                                                    </div>\r\n                                                                    )}else{\r\n                                                                        //Loading epics if data empty\r\n                                                                        return (\r\n                                                                            <div class=\"loader\">Loading...</div>\r\n                                                                        );\r\n                                                                    }\r\n                                                                    })()}\r\n                                                                    <p className=\"epicNum\">{epic.key}</p>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        );\r\n                                                    }\r\n                                                })()}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        })()}\r\n                    </div>\r\n                ))}\r\n\r\n            </div>\r\n        ))}\r\n\r\n    </div>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  Dropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n} from \"reactstrap\";\r\n\r\n\r\n// import all elements \r\nimport { useAppContext } from \"../../services/contextLib\";\r\nimport Initiative from \"./elements/Initiative\";\r\nimport FixedVersionTitle from \"./elements/FixedVersionTitle\";\r\nimport FixedVersionCell from \"./elements/FixedVersionCell\";\r\n\r\n\r\n\r\n\r\n// Displays table\r\nexport default function ReactTableComponent() {\r\n\r\n  // Import fixed versions and initiatives\r\n  const { fixedVersions, setFixedVersions } = useAppContext();\r\n  const { initiatives, setInitiatives } = useAppContext();\r\n  const { epics, setEpics } = useAppContext();\r\n\r\n\r\n\r\n  return (<div className=\"tablecont\">\r\n\r\n    {/* Display Fixed versions and due date*/}\r\n    <Row>\r\n      <div className=\"ui-cont\">\r\n        <Col xs=\"auto\">\r\n          <div className=\"InitiativeSize\"></div>\r\n        </Col>\r\n        <div className=\"ui-cont\">\r\n          {fixedVersions.map((fixVer, i) => (\r\n\r\n            <div>{(() => {\r\n\r\n              // Check if fixed version is true on filter dropdown\r\n              if (fixVer.isSelected == true) {\r\n                return (\r\n                  <FixedVersionTitle title={fixVer.name} start={fixVer.startDate} end={fixVer.releaseDate} />\r\n                );\r\n              }\r\n            })()}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Row>\r\n\r\n\r\n    {initiatives.map((initiative, i) => (\r\n\r\n      <div>{(() => {\r\n        //Check if initiative is true in filter dropdown\r\n        if (initiative.isSelected == true) {\r\n          return (\r\n            <Row className=\"initRow\">\r\n              <div className=\"ui-cont\">\r\n                {/* Display initiative*/}\r\n                <Initiative title={initiative.name} iKey={initiative.key} dueDate={initiative.dueDate}/>\r\n                {fixedVersions.map((fixVer, j) => (\r\n                  <Col xs=\"auto\">\r\n                    {(() => {\r\n                      // Check if Fixed version is true on filter dropdown\r\n                      if (fixVer.isSelected == true) {\r\n                        return (\r\n                          //Diplay cell for each fixed version\r\n                          <FixedVersionCell id={fixVer.id} title={fixVer.name} start={fixVer.startDate} end={fixVer.releaseDate} initKey={initiative.key} />\r\n                        );\r\n                      }\r\n                    })()}\r\n                  </Col>\r\n                ))}\r\n              </div>\r\n            </Row>\r\n          );\r\n        }\r\n      })()}\r\n      </div>\r\n    ))}\r\n  </div>)\r\n}","import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Container,\n  Row,\n  Col,\n  ButtonDropdown,\n  DropdownToggle,\n  Dropdown,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n} from \"reactstrap\";\n//\nimport { AppContext } from \"./services/contextLib\";\n//components\nimport { view, invoke } from \"@forge/bridge\";\nimport \"./App.css\";\nimport FilterComponent from \"./components/filter/FilterComponent\";\nimport {\n  paginationApiCalls,\n  parseByIssueType,\n  progressForEpics,\n} from \"./services/helper\";\nimport ReactTableComponent from \"./components/table/Table\";\nimport { progressForInitiatives } from \"./services/helper\";\nexport default function App() {\n  //usestates\n  const [fixedVersions, setFixedVersions] = useState([]);\n  const [initiatives, setInitiatives] = useState([]);\n  const [epics, setEpics] = useState([]);\n  const [epicsProgress, setEpicsProgress] = useState([]);\n  const [initiativesProgress, setInitiativeProgress] = useState([]);\n  const [issues, setIssues] = useState([]);\n  const [modal, setModal] = useState(false);\n  const toggleM = () => setModal(!modal);\n\n  //get all issue info via api calls\n  useEffect(() => {\n    async function getAllInfo() {\n      try {\n        const context = await view.getContext();\n        const key = context.extension.project.key;\n        await invoke(\"getFixedVersions\", { projectKey: key }).then((data) =>\n          setFixedVersions(data)\n        );\n        paginationApiCalls(key, \"getIssues\").then((data) => {\n          setEpics(parseByIssueType(data, \"Epic\"));\n          setInitiatives(parseByIssueType(data, \"Initiative\"));\n          setIssues(data);\n        });\n      } catch (e) {\n        console.log(\"API RENDER ERROR: \" + e);\n      }\n    }\n    getAllInfo();\n  }, []);\n\n  //sort initiatives in order of due date - refresh on initiative change\n  useEffect(() => {\n    function sortInitiatives() {\n      try {\n        if (initiatives.length > 0) {\n          const temp_array = initiatives.sort(function (a, b) {\n            return new Date(a.dueDate) - new Date(b.dueDate);\n          });\n          setInitiatives(temp_array);\n        }\n      } catch (e) {\n        console.log(\"API RENDER ERROR: \" + e);\n      }\n    }\n    sortInitiatives();\n  }, [initiatives]);\n\n  //get progress of all epics - refresh on epic change\n  useEffect(() => {\n    async function getProgressForEpics() {\n      try {\n        if (epics.length > 0) {\n          let epicProgress = [];\n          epics.map((epic, i) => {\n            paginationApiCalls(epic.key, \"getStoriesForEpics\").then((data) => {\n              progressForEpics(data, epic.key).then((data) => {\n                epicProgress.push(data);\n                if (epics.length == epicProgress.length) {\n                  setEpicsProgress(epicProgress);\n                }\n              });\n            });\n          });\n        }\n      } catch (e) {\n        console.log(\"API RENDER ERROR: \" + e);\n      }\n    }\n    getProgressForEpics();\n  }, [epics]);\n\n  //get progress of initiatives - refresh when initiative, epics or fixedversions value changes\n  useEffect(() => {\n    function getInitiativesProgress() {\n      try {\n        if (\n          initiatives.length > 0 &&\n          epics.length > 0 &&\n          fixedVersions.length > 0\n        ) {\n          const temp_array = progressForInitiatives(\n            initiatives,\n            epics,\n            fixedVersions\n          );\n          setInitiativeProgress(temp_array);\n        }\n      } catch (e) {\n        console.log(\"API ERROR: \" + e);\n      }\n    }\n    getInitiativesProgress();\n  }, [initiatives, epics, fixedVersions]);\n\n  // Check if fixed versions and epic arrays exist otherwise return loading ring\n  if (fixedVersions.length > 0 && issues.length > 0) {\n    return (\n      <div>\n\n        {/* Make arrays usestates global*/}\n        <AppContext.Provider\n          value={{\n            fixedVersions,\n            setFixedVersions,\n            issues,\n            setIssues,\n            initiatives,\n            setInitiatives,\n            epics,\n            setEpics,\n            epicsProgress,\n            setEpicsProgress,\n            initiativesProgress,\n            setInitiativeProgress,\n          }}\n        >\n          {/* Display filter dropdowns*/}\n          <FilterComponent />\n\n          {/* Display table*/}\n          <ReactTableComponent />\n        </AppContext.Provider>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@atlaskit/css-reset';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}