{"version":3,"sources":["App.js","index.js"],"names":["App","useState","fixedVerions","setfixedVerions","issues","setIssues","contextKey","setContextKey","contextId","setContextId","useEffect","a","view","getContext","value","extension","project","key","getKey","id","getId","invoke","projectKey","then","getFixedVersions","getIssues","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAmFeA,MAnEf,WACI,MAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAoCJ,mBAAS,MAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAiCA,OA/BAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACwBC,OAAKC,aAD7B,OACUC,EADV,OAEIP,EAAcO,EAAMC,UAAUC,QAAQC,KAF1C,4CADY,uBAAC,WAAD,wBAKZC,KACD,IAGHR,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACwBC,OAAKC,aAD7B,OACUC,EADV,OAEIL,EAAaK,EAAMC,UAAUC,QAAQG,IAFzC,4CADY,uBAAC,WAAD,wBAKZC,KACD,IAEHV,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,sEACUU,iBAAO,mBAAoB,CAAEC,WAAY,SAAUC,KAAKpB,GADlE,4CADY,uBAAC,WAAD,wBAIZqB,KACD,IAEHd,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,sEACUU,iBAAO,YAAa,CAAEC,WAAY,SAAUC,KAAKlB,GAD3D,4CADY,uBAAC,WAAD,wBAIZoB,KACD,IAGC,gCACI,gCACI,gDAGCvB,GAA8B,gBAEnC,gCACK,wCAGCE,GAAkB,gBAExB,gCACI,4CAGCE,GAA0B,gBAE/B,gCACI,2CAGCE,GAAwB,oB,YCtEzCkB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.e1f016c6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon\r\n} from \"reactstrap\";\r\nimport {view, invoke} from '@forge/bridge'\r\nimport \"./App.css\"\r\n \r\nfunction App() {\r\n    const [fixedVerions, setfixedVerions] = useState(null);\r\n    const [issues, setIssues] = useState(null);\r\n    const [contextKey, setContextKey] = useState(null);\r\n    const [contextId, setContextId] = useState(null)\r\n    //export later get key\r\n    useEffect(() => {\r\n        async function getKey(){\r\n            const value = await view.getContext();\r\n            setContextKey(value.extension.project.key);\r\n        }\r\n        getKey();\r\n    }, []);\r\n    \r\n    //export later get id\r\n    useEffect(() => {\r\n        async function getId(){\r\n            const value = await view.getContext();\r\n            setContextId(value.extension.project.id);\r\n        }\r\n        getId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function getFixedVersions(){\r\n            await invoke('getFixedVersions', { projectKey: \"CKRS\" }).then(setfixedVerions); \r\n        }\r\n        getFixedVersions();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function getIssues(){\r\n            await invoke('getIssues', { projectKey: \"CKRS\" }).then(setIssues); \r\n        }\r\n        getIssues();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h>\r\n                    Fixed Versions: \r\n                </h>\r\n                {fixedVerions ? fixedVerions : 'Loading...' }\r\n            </div>\r\n            <div>\r\n                 <h>\r\n                    Issues: \r\n                 </h>\r\n                 {issues ? issues : 'Loading...' }\r\n            </div>\r\n            <div>\r\n                <h>\r\n                    contextKey: \r\n                 </h>                            \r\n                {contextKey ? contextKey : 'Loading...'}\r\n            </div>\r\n            <div>\r\n                <h>\r\n                    contextId: \r\n                </h>                            \r\n                {contextId ? contextId : 'Loading...'}\r\n            </div>            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport '@atlaskit/css-reset';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}