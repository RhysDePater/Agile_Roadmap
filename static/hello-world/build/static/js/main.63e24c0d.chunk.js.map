{"version":3,"sources":["services/contextLib.js","components/filter/elements/FilterDropdown.jsx","components/filter/FilterComponent.jsx","services/helper.js","components/table/table.jsx","App.js","index.js"],"names":["AppContext","createContext","useAppContext","useContext","FilterDropdown","arrayToFilter","setArrayToFilter","useState","dropdownOpen","setDropdownOpen","Dropdown","isOpen","toggle","prevState","DropdownToggle","tag","data-toggle","aria-expanded","className","DropdownMenu","map","data","i","FormGroup","check","Label","Input","type","defaultChecked","length","onChange","e","target","checked","newArr","console","log","FilterComponent","fixedVersions","setFixedVersions","initiatives","setInitiatives","parseByIssueType","issuesData","issueTypeFilter","temp_array","issue","issueType","push","ReactTableComponent","epics","setEpics","React","useMemo","initiative","element","col1","name","epic","j","parents","parent","l","key","FV","k","fixVersions","id","test","isSelected","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding","App","issues","setIssues","useEffect","a","view","getContext","context","extension","project","invoke","projectKey","then","getAllInfo","Provider","value","version","Object","keys","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63e24c0d.chunk.js","sourcesContent":["import { useContext, createContext } from \"react\";\r\n\r\nexport const AppContext = createContext(null);\r\n//create a global context for all pages\r\nexport function useAppContext() {\r\n  return useContext(AppContext);\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    ButtonDropdown,\r\n    DropdownToggle,\r\n    Dropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormText,\r\n} from \"reactstrap\";\r\n\r\nexport default function FilterDropdown(arrayToFilter, setArrayToFilter) {\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const toggle = () => setDropdownOpen(prevState => !prevState);\r\n    \r\n    return (\r\n        <div>\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle} >\r\n                <DropdownToggle\r\n                    tag=\"span\"\r\n                    data-toggle=\"dropdown\"\r\n                    aria-expanded={dropdownOpen}\r\n                >\r\n                    <div className=\"dropdwnbtn\"><b>Filter â–¶</b></div>\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {arrayToFilter.map((data, i) => (\r\n                        <div className=\"dropitem\"><FormGroup check>\r\n                            <Label check>\r\n                                {arrayToFilter[i][1] /**label names */ }\r\n                                <Input type=\"checkbox\" \r\n                                defaultChecked={data[data.length - 1] /**checkbox is ticked value*/ } \r\n                                onChange={(e) => {\r\n                                    //store current data\r\n                                    //if an event update\r\n                                    if(e.target.checked == true){     \r\n                                        let newArr = [...arrayToFilter];       \r\n                                        console.log(\"BOOLEAN set to: \" + e.target.checked);                \r\n                                        //store updated value in temp array\r\n                                        newArr[i][newArr[i].length - 1] = e.target.checked;\r\n                                        //update usestate\r\n                                        setArrayToFilter(newArr)              \r\n                                        console.log(arrayToFilter[i][newArr.length - 1]);                                                         \r\n                                    }\r\n                                    // check if box is not ticked\r\n                                    if(e.target.checked == false){\r\n                                        let newArr = [...arrayToFilter];\r\n                                        console.log(\"BOOLEAN set to: \" + e.target.checked);\r\n                                        //store updated value in temp array\r\n                                        newArr[i][newArr[i].length - 1] = e.target.checked;\r\n                                        //update usestate\r\n                                        setArrayToFilter(newArr)  \r\n                                        console.log(arrayToFilter[i][newArr.length - 1]);                                                         \r\n             \r\n                                    }                                                                            \r\n                                }} />{\" \"}\r\n                            </Label>{\" \"}\r\n                        </FormGroup></div>\r\n                    ))}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </div>\r\n    )      \r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    ButtonDropdown,\r\n    DropdownToggle,\r\n    Dropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormText,\r\n} from \"reactstrap\";\r\n\r\nimport { useAppContext } from \"../../services/contextLib\";\r\nimport FilterDropdown from \"./elements/FilterDropdown\";\r\n\r\n\r\nexport default function FilterComponent() {\r\n\r\n    const { fixedVersions, setFixedVersions } = useAppContext();\r\n    const { initiatives, setInitiatives } = useAppContext();\r\n\r\n    return (\r\n        <div>\r\n            {FilterDropdown(fixedVersions, setFixedVersions)}\r\n            {/* {FilterDropdown(initiatives, setInitiatives)} */}\r\n        </div>\r\n    )\r\n}","// export function parseIssues(issuesData){\r\n//     var temp_array = [];\r\n//     for(let i = 0; i < issuesData[0].length; i++){\r\n//         var element = issuesData[0][i];\r\n//         temp_array.push(element);\r\n//     }\r\n//     return temp_array;\r\n// }\r\n\r\nexport function parseByIssueType(issuesData, issueTypeFilter){\r\n    var temp_array = [];\r\n    issuesData.map((issue, i) => {\r\n        if(issue.issueType == issueTypeFilter){\r\n            temp_array.push(issue);\r\n        }\r\n    })    \r\n    console.log(temp_array)\r\n    return temp_array;\r\n}\r\n\r\n/**\r\n   * \r\n   * @param {*} contextKey project context key\r\n   * @param {*} apiCall1 fetch issues api call\r\n   * @param {*} apiCall2 fetch children api call\r\n   * @returns returns combined 2 api calls values into a single array of arrays\r\n   */\r\n export async function fetchAllIssueInfo(epicKeys, issues) {\r\n    for(let i =0;i<issues.length;i++)\r\n    {\r\n        if(issues[i][2] == \"Epic\")\r\n        {\r\n          let issuesKeys = await apiCall2(issues[i][0]);\r\n          issues[i].push(issuesKeys);\r\n        }\r\n    }\r\n    return [issues];\r\n  }\r\n  ","import React, { useEffect, useState } from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  Dropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n} from \"reactstrap\";\r\n\r\nimport { useAppContext } from \"../../services/contextLib\";\r\n\r\nexport default function ReactTableComponent() {\r\n\r\n  const { fixedVersions, setFixedVersions } = useAppContext();\r\n  const { initiatives, setInitiatives } = useAppContext();\r\n  const { epics, setEpics } = useAppContext();\r\n\r\n\r\n\r\n  const data = React.useMemo(\r\n    () => {\r\n      let temp_array = [];\r\n\r\n\r\n      initiatives.map((initiative, i) => {\r\n\r\n        //Display each initiative \r\n        let element = {\r\n          col1: initiative.name,\r\n        };\r\n\r\n        epics.map((epic, j) => {\r\n\r\n          epic.parents.map((parent, l) => {\r\n\r\n            // Check if epic is linked to initiative\r\n            if (parent == initiative.key) {\r\n\r\n\r\n              fixedVersions.map((FV, k) => {\r\n\r\n                //Check if epic is linked to fixedVersion\r\n                if (epic.fixVersions == FV.id) {\r\n                  let test = FV.id;\r\n\r\n                  // check if initiative and fixV are selected\r\n                  if (FV.isSelected == true && initiative.isSelected == true) {\r\n                    console.log(\"Ini: \", initiative.name, \"FixV: \", FV.id, \"ep: \", epic.name);\r\n                    // Add epic to corresponding cell\r\n                    element.[test] = epic.name;\r\n                  };\r\n\r\n                };\r\n              });\r\n            };\r\n          });\r\n        });\r\n\r\n        temp_array.push(element);\r\n      });\r\n\r\n\r\n      return temp_array;\r\n    }\r\n  );\r\n\r\n\r\n\r\n  const columns = React.useMemo(\r\n    () => {\r\n      let temp_array = [{\r\n        Header: \" \",\r\n        accessor: \"col1\"\r\n      }];\r\n\r\n      fixedVersions.map((FV, i) => {\r\n        let element = {\r\n          Header: FV.name,\r\n          accessor: FV.id\r\n        };\r\n        temp_array.push(element);\r\n      });\r\n\r\n\r\n      return temp_array;\r\n    }\r\n  );\r\n\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n  } = useTable({ columns, data });\r\n\r\n  return (\r\n    <div>\r\n\r\n\r\n      <table {...getTableProps()} style={{ border: \"solid 1px black\" }}>\r\n\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th\r\n                  {...column.getHeaderProps()}\r\n                  style={{\r\n                    border: \"solid 2px black\",\r\n                    color: \"black\",\r\n                    fontWeight: \"bold\"\r\n                  }}\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td\r\n                      {...cell.getCellProps()}\r\n                      style={{\r\n                        padding: \"10px\",\r\n                        border: \"solid 1px gray\",\r\n\r\n                      }}\r\n                    >\r\n                      {cell.render(\"Cell\")}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  )\r\n\r\n}","import React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Container,\n    Row,\n    Col,\n    ButtonDropdown,\n    DropdownToggle,\n    Dropdown,\n    DropdownMenu,\n    DropdownItem,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    FormText,\n} from \"reactstrap\";\n//\nimport { AppContext } from \"./services/contextLib\";\n//components\n// \nimport { view, invoke } from \"@forge/bridge\";\nimport \"./App.css\";\n// import FilterDropDown from \"./components/filter/FilterDropdown\"\nimport FilterComponent from \"./components/filter/FilterComponent\";\nimport { parseByIssueType } from \"./services/helper\";\n//import TableComponent from \"./components/table/TableComponent\";\n//import FixedVersionCol from \"./components/table/FixedVersionCol\";\nimport ReactTableComponent from \"./components/table/table\";\nexport default function App() {\n    //usestates\n    const [fixedVersions, setFixedVersions] = useState([]);\n    const [initiatives, setInitiatives] = useState([]);\n    const [epics, setEpics] = useState([]);\n    const [issues, setIssues] = useState([]);\n    const [modal, setModal] = useState(false);\n    const toggleM = () => setModal(!modal);\n\n    useEffect(() => {\n        async function getAllInfo() {\n            try {\n                const context = await view.getContext();\n                const key = context.extension.project.key\n                await invoke(\"getFixedVersions\", { projectKey: key }).then((data) =>\n                    setFixedVersions(data)\n                );\n                await invoke(\"getIssues\", { projectKey: key }).then((data) => {\n                    setEpics(parseByIssueType(data, \"Epic\"))\n                    setInitiatives(parseByIssueType(data, \"Initiative\"))\n                    setIssues(data)\n\n                }\n                );\n            } catch (e) {\n                console.log(\"API RENDER ERROR: \" + e);\n            }\n        }\n        getAllInfo();\n    }, []);\n\n    if (fixedVersions.length > 0 && issues.length > 0) {\n        return (\n            <div>\n                <AppContext.Provider value={{ fixedVersions, setFixedVersions, issues, setIssues, initiatives, setInitiatives, epics, setEpics }}>\n                    <FilterComponent />\n\n                    <ReactTableComponent />\n                </AppContext.Provider>\n\n                <div>\n                    {fixedVersions.map((version, i) => (\n                        <p>\n                            {Object.keys(version).map((key, j) => (\n                                <span>{key}: {version[key]}</span>\n                            ))}\n                        </p>\n                    ))}\n                </div>\n                <div>\n                    {epics.map((epic, i) => (\n                        <p>\n                            {Object.keys(epic).map((key, j) => (\n                                <span>{key}: {epic[key]}</span>\n                            ))}\n                        </p>\n                    ))}\n                </div>\n                <div>\n                    {initiatives.map((initiative, i) => (\n                        <p>\n                            {Object.keys(initiative).map((key, j) => (\n                                <span>{key}: {initiative[key]}</span>\n                            ))}\n                        </p>\n                    ))}\n                </div>\n\n            </div>\n\n        )\n    } else {\n        return <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>;\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@atlaskit/css-reset';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}